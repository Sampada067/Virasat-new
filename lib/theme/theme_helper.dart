import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA70002,
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.indigoA70002,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(17.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.purple500D3,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray70003,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.indigoA70002,
          fontSize: 17.fSize,
          fontFamily: 'Brawler',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.redA700,
          fontSize: 14.fSize,
          fontFamily: 'Inria Sans',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.errorContainer.withOpacity(1),
          fontSize: 9.fSize,
          fontFamily: 'Brawler',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.errorContainer.withOpacity(1),
          fontSize: 45.fSize,
          fontFamily: 'Bonheur Royale',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.purple900,
          fontSize: 36.fSize,
          fontFamily: 'Inria Sans',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: appTheme.whiteA70002,
          fontSize: 32.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.purple900,
          fontSize: 28.fSize,
          fontFamily: 'Inria Sans',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.errorContainer.withOpacity(1),
          fontSize: 24.fSize,
          fontFamily: 'Brawler',
          fontWeight: FontWeight.w400,
        ),
        labelMedium: TextStyle(
          color: colorScheme.errorContainer.withOpacity(1),
          fontSize: 11.fSize,
          fontFamily: 'Brawler',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 20.fSize,
          fontFamily: 'Inria Sans',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: colorScheme.errorContainer.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'Brawler',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFC984F8),
    primaryContainer: Color(0XFF3313FC),
    secondaryContainer: Color(0XFF9B9B9B),

    // Error colors
    errorContainer: Color(0X6E000000),
    onError: Color(0XFF9B93F5),

    // On colors(text colors)
    onPrimary: Color(0XFF000AFC),
    onPrimaryContainer: Color(0XFFF4EBEB),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF060606);

  // BlueGray
  Color get blueGray100 => Color(0XFFD5D5D5);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray400 => Color(0XFF868686);
  Color get blueGray700 => Color(0XFF545151);
  Color get blueGray900 => Color(0XFF2F2F2F);

  // DeepPurple
  Color get deepPurple900 => Color(0XFF11059B);

  // Gray
  Color get gray200 => Color(0XFFEEEDED);
  Color get gray20001 => Color(0XFFEBEBEB);
  Color get gray20002 => Color(0XFFEBEAEA);
  Color get gray300 => Color(0XFFE6E6E6);
  Color get gray400 => Color(0XFFCDC9C9);
  Color get gray500 => Color(0XFF919191);
  Color get gray50001 => Color(0XFFA7A4A4);
  Color get gray600 => Color(0XFF6D6D6D);
  Color get gray60001 => Color(0XFF707070);
  Color get gray60002 => Color(0XFF7F7D7D);
  Color get gray60003 => Color(0XFF7C7C7C);
  Color get gray60004 => Color(0XFF747474);
  Color get gray700 => Color(0XFF676767);
  Color get gray70001 => Color(0XFF565558);
  Color get gray70002 => Color(0XFF606060);
  Color get gray70003 => Color(0XFF676464);
  Color get gray70004 => Color(0XFF6A6A6A);
  Color get gray800 => Color(0XFF594D4D);
  Color get gray80001 => Color(0XFF494949);
  Color get gray80002 => Color(0XFF505050);
  Color get gray80003 => Color(0XFF3A3A3A);
  Color get gray900 => Color(0XFF1A1A1A);

  // Green
  Color get greenA700 => Color(0XFF20AC68);

  // Indigo
  Color get indigo500 => Color(0XFF3835CB);
  Color get indigoA100 => Color(0XFF9A92FC);
  Color get indigoA10001 => Color(0XFFA2A0F8);
  Color get indigoA10002 => Color(0XFF9A93F4);
  Color get indigoA400 => Color(0XFF4D55FF);
  Color get indigoA700 => Color(0XFF0F35FF);
  Color get indigoA70001 => Color(0XFF1246FF);
  Color get indigoA70002 => Color(0XFF323AFF);
  Color get indigoA70003 => Color(0XFF3726FF);
  Color get indigoA70004 => Color(0XFF0019FF);
  Color get indigoA70005 => Color(0XFF1D4EFF);

  // PurpleD
  Color get purple500D3 => Color(0XD3A81199);

  // Purplef
  Color get purple6003f => Color(0X3F9B1A9E);

  // Purple
  Color get purple900 => Color(0XFF570092);

  // Red
  Color get red600 => Color(0XFFF41E1E);
  Color get redA700 => Color(0XFFFF0202);

  // RedCc
  Color get red700Cc => Color(0XCCDE1E41);

  // Teal
  Color get teal700 => Color(0XFF137272);

  // White
  Color get whiteA700 => Color(0XFFFFFCFC);
  Color get whiteA70001 => Color(0XFFFFFEFE);
  Color get whiteA70002 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
